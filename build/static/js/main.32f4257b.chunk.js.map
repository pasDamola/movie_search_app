{"version":3,"sources":["components/MovieCard.js","components/MovieCardList.js","components/ErrorMessage.js","components/WelcomeMessage.js","components/SearchMovies.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movies","filter","movie","poster_path","map","className","src","alt","title","release_date","vote_average","overview","id","MovieCardList","ErrorMessage","query","WelcomeMessage","SearchMovies","useState","setQuery","setMovies","request","setRequest","searchMovies","e","a","preventDefault","url","fetch","res","json","data","results","sort","b","console","error","onSubmit","htmlFor","type","name","placeholder","value","onChange","target","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAuBgBA,MAtBhB,YAAgC,IAAXC,EAAU,EAAVA,OAChB,OACK,mCACOA,EAAOC,QAAO,SAAAC,GAAK,OAAIA,EAAMC,eAAaC,KAAI,SAAAF,GAAK,OAChD,sBAAKG,UAAU,OAAf,UACI,qBAAKA,UAAU,cACXC,IAAG,0DAAqDJ,EAAMC,aAC9DI,IAAKL,EAAMM,MAAQ,YAEvB,sBAAKH,UAAU,gBAAf,UACA,oBAAIA,UAAU,cAAd,SAA6BH,EAAMM,QACnC,4BAAG,mDAAsBN,EAAMO,kBAC/B,4BAAG,6CAAgBP,EAAMQ,kBACzB,mBAAGL,UAAU,aAAb,SAA2BH,EAAMS,gBATVT,EAAMU,UCStCC,MAVf,YAAoC,IAAXb,EAAU,EAAVA,OACrB,OACI,qBAAKK,UAAU,YAAf,SACI,cAAC,EAAD,CAAWL,OAAQA,OCDhBc,MANf,YAAkC,IAAVC,EAAS,EAATA,MACpB,OACI,qBAAIV,UAAU,QAAd,yDAAmEU,EAAnE,eCKOC,MAPf,WACI,OACI,oBAAIX,UAAU,UAAd,uFC6DOY,MAzDf,WAA0B,IAAD,EACKC,mBAAS,IADd,mBACdH,EADc,KACPI,EADO,OAEOD,mBAAS,IAFhB,mBAEdlB,EAFc,KAENoB,EAFM,OAGSF,oBAAS,GAHlB,mBAGdG,EAHc,KAGLC,EAHK,KAKfC,EAAY,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,6DACjBD,EAAEE,iBAGIC,EAJW,kHAIsGZ,EAJtG,iDAOKa,MAAMD,GAPX,cAOPE,EAPO,gBAQOA,EAAIC,OARX,QAQPC,EARO,QAURC,QAAQC,MAAK,SAACR,EAAGS,GAAJ,OAAUA,EAAExB,aAAee,EAAEf,gBAC/CU,EAAUW,EAAKC,SACfV,GAAW,GAZE,kDAcba,QAAQC,MAAR,MAda,0DAAH,sDAkBlB,OACI,qCACI,uBAAM/B,UAAU,OAAOgC,SAAUd,EAAjC,UACI,uBAAOlB,UAAU,QAAQiC,QAAQ,QAAjC,wBACA,uBAAOjC,UAAU,QAAQkC,KAAK,OAAOC,KAAK,QACtCC,YAAY,qBACZC,MAAO3B,EAAO4B,SAAU,SAACnB,GAAD,OAAOL,EAASK,EAAEoB,OAAOF,UAErD,wBAAQrC,UAAU,SAASkC,KAAK,SAAhC,wBAGgB,IAAZlB,EACO,cAAC,EAAD,IACDA,GAAWrB,EAAO6C,OAAS,EAC1B,cAAC,EAAD,CAAc9B,MAAOA,IAGrB,cAAC,EAAD,CAAef,OAAQA,QClCnC8C,MATf,WACE,OACE,sBAAKzC,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,gCACA,cAAC,EAAD,QCKS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.32f4257b.chunk.js","sourcesContent":["\r\nfunction MovieCard({ movies }) {\r\n     return (\r\n          <>\r\n                {movies.filter(movie => movie.poster_path).map(movie => (\r\n                    <div className=\"card\" key={movie.id}>\r\n                        <img className=\"card--image\"\r\n                            src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`}\r\n                            alt={movie.title + ' poster'}\r\n                            />\r\n                        <div className=\"card--content\">\r\n                        <h3 className=\"card--title\">{movie.title}</h3>\r\n                        <p><small>RELEASE DATE: {movie.release_date}</small></p>\r\n                        <p><small>RATING: {movie.vote_average}</small></p>\r\n                        <p className=\"card--desc\">{movie.overview}</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                ))}\r\n            </> \r\n     )\r\n }\r\n\r\n export default MovieCard","import { useState } from 'react' \r\nimport MovieCard from './MovieCard'\r\n\r\n\r\nfunction MovieCardList({ movies }) {\r\n    return (\r\n        <div className=\"card-list\">\r\n            <MovieCard movies={movies}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MovieCardList","function ErrorMessage({ query }) {\r\n    return (\r\n        <h2 className=\"error\">Sorry no movies exist in the database from '{query}' search</h2>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage","function WelcomeMessage() {\r\n    return (\r\n        <h2 className=\"welcome\">Please search for any movie title of your choice in the search bar above</h2>\r\n    )\r\n}\r\n\r\n\r\nexport default WelcomeMessage","import React, { useState } from 'react'\r\nimport MovieCardList from './MovieCardList'\r\nimport ErrorMessage from './ErrorMessage'\r\nimport WelcomeMessage from './WelcomeMessage'\r\n\r\n\r\nfunction SearchMovies () {\r\n    const [query, setQuery] = useState('')\r\n    const [movies, setMovies] = useState([])\r\n    const [request, setRequest] = useState(false)\r\n\r\n    const searchMovies = async (e) => {\r\n        e.preventDefault();\r\n        \r\n        \r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=87ce4a6f312ae195dacc5280a2ced1f1&language=en-US&query=${query}&page=1&include_adult=false`;\r\n        \r\n        try {\r\n            const res = await fetch(url)\r\n            const data  = await res.json()\r\n            // sort items in descending order based on rating\r\n            data.results.sort((a, b) => b.vote_average - a.vote_average)\r\n            setMovies(data.results)\r\n            setRequest(true)\r\n        }catch(err){\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <label className=\"label\" htmlFor=\"query\">Movie Name</label>\r\n                <input className=\"input\" type=\"text\" name=\"query\"\r\n                    placeholder=\"i.e. Jurassic Park\"\r\n                    value={query} onChange={(e) => setQuery(e.target.value)}\r\n                    />\r\n                <button className=\"button\" type=\"submit\">Search</button>\r\n            </form>\r\n            {(function() {\r\n                if (request === false) {\r\n                    return <WelcomeMessage />;\r\n                } else if(request && movies.length < 1){\r\n                    return <ErrorMessage query={query}/>;\r\n                }\r\n                else {\r\n                    return <MovieCardList movies={movies}/>;\r\n                }\r\n                })()\r\n            }\r\n            {/* {(function(){\r\n                if(request === true && movies.length > 0){\r\n                    return\r\n                }\r\n            })()\r\n            } */}\r\n            \r\n   \r\n    </>\r\n    )\r\n}\r\n\r\n\r\nexport default SearchMovies","import './App.css';\nimport SearchMovies from './components/SearchMovies'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">React Movie Search</h1>\n      <SearchMovies />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}